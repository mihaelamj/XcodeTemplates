<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Kind</key>
    <string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
    <key>Identifier</key>
    <string>com.apple.dt.unit.coreDataApplication</string>
    <key>Ancestors</key>
    <array>
        <string>com.apple.dt.unit.application.SwiftUI.macOS</string>
    </array>
    <key>Options</key>
    <array>
        <dict>
            <key>Identifier</key>
            <string>coreData</string>
            <key>Name</key>
            <string>Use Core Data</string>
            <key>Description</key>
            <string>Whether the application should use the Core Data framework for storage</string>
            <key>SortOrder</key>
            <integer>200</integer>
            <key>Type</key>
            <string>checkbox</string>
            <key>Default</key>
            <string>false</string>
            <key>Units</key>
            <dict>
                <key>true</key>
                <array>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Swift</string>
                            <key>userInterface</key>
                            <string>SwiftUI</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.swift:imports:importSwiftUI</string>
                            <string>AppDelegate.swift:implementation:properties:window</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:comments</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code:window</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>*:imports:importSwiftUI</key>
                            <string>import SwiftUI</string>
                            <key>AppDelegate.swift:implementation:properties:window</key>
                            <string>var window: NSWindow!</string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:comments</key>
                            <string></string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code</key>
                            <string>// Create the SwiftUI view and set the context as the value for the managedObjectContext environment keyPath.
// Add `@Environment(\.managedObjectContext)` in the views that will need the context.
let contentView = ContentView().environment(\.managedObjectContext, persistentContainer.viewContext)</string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code:window</key>
                            <string>
// Create the window and set the content view.
window = NSWindow(
    contentRect: NSRect(x: 0, y: 0, width: 480, height: 300),
    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
    backing: .buffered, defer: false)
window.center()
window.setFrameAutosaveName("Main Window")
window.contentView = NSHostingView(rootView: contentView)
window.makeKeyAndOrderFront(nil)</string>
                        </dict>
                    </dict>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</key>
                            <dict>
                                <key>Path</key>
                                <string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
                                <key>SortOrder</key>
                                <integer>99</integer>
                            </dict>
                        </dict>
                    </dict>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Objective-C</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.h:imports:importFramework:CoreData</string>
                            <string>AppDelegate.h:interface:coreData</string>
                            <string>AppDelegate.m:extension:properties:window</string>
                            <string>AppDelegate.m:extension:saveAction</string>
                            <string>AppDelegate.m:implementation:coreData</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>*:importCoreData</key>
                            <string>#import &lt;CoreData/CoreData.h&gt;
</string>
                            <key>AppDelegate.h:interface:coreData</key>
                            <string>@property (readonly, strong) ___VARIABLE_persistentContainerClass___ *persistentContainer;
</string>
                            <key>AppDelegate.m:extension:properties:window</key>
                            <string>___VARIABLE_windowPropertyObjC___</string>
                            <key>AppDelegate.m:extension:saveAction</key>
                            <string>- (IBAction)saveAction:(id)sender;
</string>
                            <key>AppDelegate.m:implementation:coreData</key>
                            <string>#pragma mark - Core Data stack

@synthesize persistentContainer = _persistentContainer;

- (___VARIABLE_persistentContainerClass___ *)persistentContainer {
    // The persistent container for the application. This implementation creates and returns a container, having loaded the store for the application to it.
    @synchronized (self) {
        if (_persistentContainer == nil) {
            _persistentContainer = [[___VARIABLE_persistentContainerClass___ alloc] initWithName:@&quot;___PACKAGENAMEASIDENTIFIER___&quot;];
            [_persistentContainer loadPersistentStoresWithCompletionHandler:^(NSPersistentStoreDescription *storeDescription, NSError *error) {
                if (error != nil) {
                    // Replace this implementation with code to handle the error appropriately.
                    // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                    
                    /*
                     Typical reasons for an error here include:
                     * The parent directory does not exist, cannot be created, or disallows writing.
                     * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                     * The device is out of space.
                     * The store could not be migrated to the current model version.
                     Check the error message to determine what the actual problem was.
                    */
                    NSLog(@&quot;Unresolved error %@, %@&quot;, error, error.userInfo);
                    abort();
                }
            }];
        }
    }
    
    return _persistentContainer;
}

#pragma mark - Core Data Saving and Undo support

- (IBAction)saveAction:(id)sender {
    // Performs the save action for the application, which is to send the save: message to the application&apos;s managed object context. Any encountered errors are presented to the user.
    NSManagedObjectContext *context = self.persistentContainer.viewContext;

    if (![context commitEditing]) {
        NSLog(@&quot;%@:%@ unable to commit editing before saving&quot;, [self class], NSStringFromSelector(_cmd));
    }
    
    NSError *error = nil;
    if (context.hasChanges &amp;&amp; ![context save:&amp;error]) {
        // Customize this code block to include application-specific recovery steps.              
        [[NSApplication sharedApplication] presentError:error];
    }
}

- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)window {
    // Returns the NSUndoManager for the application. In this case, the manager returned is that of the managed object context for the application.
    return self.persistentContainer.viewContext.undoManager;
}

- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication *)sender {
    // Save changes in the application&apos;s managed object context before the application terminates.
    NSManagedObjectContext *context = self.persistentContainer.viewContext;

    if (![context commitEditing]) {
        NSLog(@&quot;%@:%@ unable to commit editing to terminate&quot;, [self class], NSStringFromSelector(_cmd));
        return NSTerminateCancel;
    }
    
    if (!context.hasChanges) {
        return NSTerminateNow;
    }
    
    NSError *error = nil;
    if (![context save:&amp;error]) {

        // Customize this code block to include application-specific recovery steps.
        BOOL result = [sender presentError:error];
        if (result) {
            return NSTerminateCancel;
        }

        NSString *question = NSLocalizedString(@&quot;Could not save changes while quitting. Quit anyway?&quot;, @&quot;Quit without saves error question message&quot;);
        NSString *info = NSLocalizedString(@&quot;Quitting now will lose any changes you have made since the last successful save&quot;, @&quot;Quit without saves error question info&quot;);
        NSString *quitButton = NSLocalizedString(@&quot;Quit anyway&quot;, @&quot;Quit anyway button title&quot;);
        NSString *cancelButton = NSLocalizedString(@&quot;Cancel&quot;, @&quot;Cancel button title&quot;);
        NSAlert *alert = [[NSAlert alloc] init];
        [alert setMessageText:question];
        [alert setInformativeText:info];
        [alert addButtonWithTitle:quitButton];
        [alert addButtonWithTitle:cancelButton];

        NSInteger answer = [alert runModal];
        
        if (answer == NSAlertSecondButtonReturn) {
            return NSTerminateCancel;
        }
    }

    return NSTerminateNow;
}
</string>
                        </dict>
                    </dict>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Swift</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.swift:implementation:properties:window</string>
                            <string>AppDelegate.swift:implementation:coreData</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>AppDelegate.swift:implementation:properties:window</key>
                            <string>___VARIABLE_windowPropertySwift___</string>
                            <key>AppDelegate.swift:implementation:coreData</key>
                            <string>// MARK: - Core Data stack

lazy var persistentContainer: ___VARIABLE_persistentContainerClass___ = {
    /*
     The persistent container for the application. This implementation
     creates and returns a container, having loaded the store for the
     application to it. This property is optional since there are legitimate
     error conditions that could cause the creation of the store to fail.
    */
    let container = ___VARIABLE_persistentContainerClass___(name: &quot;___PACKAGENAMEASIDENTIFIER___&quot;)
    container.loadPersistentStores(completionHandler: { (storeDescription, error) in
        if let error = error {
            // Replace this implementation with code to handle the error appropriately.
            // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
             
            /*
             Typical reasons for an error here include:
             * The parent directory does not exist, cannot be created, or disallows writing.
             * The persistent store is not accessible, due to permissions or data protection when the device is locked.
             * The device is out of space.
             * The store could not be migrated to the current model version.
             Check the error message to determine what the actual problem was.
             */
            fatalError(&quot;Unresolved error \(error)&quot;)
        }
    })
    return container
}()

// MARK: - Core Data Saving and Undo support

@IBAction func saveAction(_ sender: AnyObject?) {
    // Performs the save action for the application, which is to send the save: message to the application's managed object context. Any encountered errors are presented to the user.
    let context = persistentContainer.viewContext

    if !context.commitEditing() {
        NSLog("\(NSStringFromClass(type(of: self))) unable to commit editing before saving")
    }
    if context.hasChanges {
        do {
            try context.save()
        } catch {
            // Customize this code block to include application-specific recovery steps.
            let nserror = error as NSError
            NSApplication.shared.presentError(nserror)
        }
    }
}

func windowWillReturnUndoManager(window: NSWindow) -&gt; UndoManager? {
    // Returns the NSUndoManager for the application. In this case, the manager returned is that of the managed object context for the application.
    return persistentContainer.viewContext.undoManager
}

func applicationShouldTerminate(_ sender: NSApplication) -&gt; NSApplication.TerminateReply {
    // Save changes in the application's managed object context before the application terminates.
    let context = persistentContainer.viewContext
    
    if !context.commitEditing() {
        NSLog("\(NSStringFromClass(type(of: self))) unable to commit editing to terminate")
        return .terminateCancel
    }
    
    if !context.hasChanges {
        return .terminateNow
    }
    
    do {
        try context.save()
    } catch {
        let nserror = error as NSError

        // Customize this code block to include application-specific recovery steps.
        let result = sender.presentError(nserror)
        if (result) {
            return .terminateCancel
        }
        
        let question = NSLocalizedString("Could not save changes while quitting. Quit anyway?", comment: "Quit without saves error question message")
        let info = NSLocalizedString("Quitting now will lose any changes you have made since the last successful save", comment: "Quit without saves error question info");
        let quitButton = NSLocalizedString("Quit anyway", comment: "Quit anyway button title")
        let cancelButton = NSLocalizedString("Cancel", comment: "Cancel button title")
        let alert = NSAlert()
        alert.messageText = question
        alert.informativeText = info
        alert.addButton(withTitle: quitButton)
        alert.addButton(withTitle: cancelButton)
        
        let answer = alert.runModal()
        if answer == .alertSecondButtonReturn {
            return .terminateCancel
        }
    }
    // If we got here, it is time to quit.
    return .terminateNow
}
</string>
                        </dict>
                    </dict>
                    <dict>
                        <!-- CoreDataCloudKit requires a minimum deployment target of 10.15 -->
                        <key>RequiredOptions</key>
                        <dict>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                            <key>coreDataCloudKit</key>
                            <string>true</string>
                        </dict>
                        <key>Targets</key>
                        <array>
                            <dict>
                                <key>SharedSettings</key>
                                <dict>
                                    <key>MACOSX_DEPLOYMENT_TARGET</key>
                                    <string>10.15</string>
                                </dict>
                            </dict>
                        </array>
                    </dict>
                </array>
                <key>false</key>
                <array>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Objective-C</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.m:extension:properties:window</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>AppDelegate.m:extension:properties:window</key>
                            <string>___VARIABLE_windowPropertyObjC___</string>
                        </dict>
                    </dict>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Swift</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.swift:implementation:properties:window</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>AppDelegate.swift:implementation:properties:window</key>
                            <string>___VARIABLE_windowPropertySwift___</string>
                        </dict>
                    </dict>
                    <dict>
                        <key>RequiredOptions</key>
                        <dict>
                            <key>languageChoice</key>
                            <string>Swift</string>
                            <key>userInterface</key>
                            <string>SwiftUI</string>
                            <key>appLifecycle</key>
                            <string>Cocoa</string>
                        </dict>
                        <key>Nodes</key>
                        <array>
                            <string>AppDelegate.swift:imports:importSwiftUI</string>
                            <string>AppDelegate.swift:implementation:properties:window</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:comments</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code</string>
                            <string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code:window</string>
                        </array>
                        <key>Definitions</key>
                        <dict>
                            <key>*:imports:importSwiftUI</key>
                            <string>import SwiftUI</string>
                            <key>AppDelegate.swift:implementation:properties:window</key>
                            <string>var window: NSWindow!</string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:comments</key>
                            <string></string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code</key>
                            <string>// Create the SwiftUI view that provides the window contents.
let contentView = ContentView()
</string>
                            <key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:code:window</key>
                            <string>
// Create the window and set the content view.
window = NSWindow(
    contentRect: NSRect(x: 0, y: 0, width: 480, height: 300),
    styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
    backing: .buffered, defer: false)
window.isReleasedWhenClosed = false
window.center()
window.setFrameAutosaveName("Main Window")
window.contentView = NSHostingView(rootView: contentView)
window.makeKeyAndOrderFront(nil)</string>
                        </dict>
                    </dict>
                </array>
            </dict>
        </dict>
        <dict>
            <key>Identifier</key>
            <string>coreDataCloudKit</string>
            <key>Name</key>
            <string>Host in CloudKit</string>
            <key>Description</key>
            <string>Whether the application should use Core Data with CloudKit</string>
            <key>RequiredOptions</key>
            <dict>
                <key>coreData</key>
                <string>true</string>
            </dict>
            <key>Indented</key>
            <true />
            <key>SortOrder</key>
            <integer>201</integer>
            <key>Type</key>
            <string>checkbox</string>
            <key>Default</key>
            <string>false</string>
            <key>Values</key>
            <array>
                <string>false</string>
                <string>true</string>
            </array>
            <key>Variables</key>
            <dict>
                <key>false</key>
                <dict>
                    <key>persistentContainerClass</key>
                    <string>NSPersistentContainer</string>
                    <key>usedWithCloudKitModelAttribute</key>
                    <string>false</string>
                </dict>
                <key>true</key>
                <dict>
                    <key>persistentContainerClass</key>
                    <string>NSPersistentCloudKitContainer</string>
                    <key>usedWithCloudKitModelAttribute</key>
                    <string>true</string>
                </dict>
            </dict>
        </dict>
    </array>
</dict>
</plist>
